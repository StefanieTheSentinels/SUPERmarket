{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SuperMarket dataset analysis","text":""},{"location":"notebooks/final/","title":"Supermarket python project","text":""},{"location":"notebooks/final/#importing-all-needful-libraries-and-csv-file-with-data","title":"Importing all needful libraries and csv file with data","text":"<pre><code>import pandas as pd\nimport math\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nsales = pd.read_csv('supermarket_sales - Sheet1.csv', header=0)\nsales\n</code></pre> Invoice ID Branch City Customer type Gender Product line Unit price Quantity Tax 5% Total Date Time Payment cogs gross margin percentage gross income Rating 0 750-67-8428 A Yangon Member Female Health and beauty 74.69 7 26.1415 548.9715 1/5/2019 13:08 Ewallet 522.83 4.761905 26.1415 9.1 1 226-31-3081 C Naypyitaw Normal Female Electronic accessories 15.28 5 3.8200 80.2200 3/8/2019 10:29 Cash 76.40 4.761905 3.8200 9.6 2 631-41-3108 A Yangon Normal Male Home and lifestyle 46.33 7 16.2155 340.5255 3/3/2019 13:23 Credit card 324.31 4.761905 16.2155 7.4 3 123-19-1176 A Yangon Member Male Health and beauty 58.22 8 23.2880 489.0480 1/27/2019 20:33 Ewallet 465.76 4.761905 23.2880 8.4 4 373-73-7910 A Yangon Normal Male Sports and travel 86.31 7 30.2085 634.3785 2/8/2019 10:37 Ewallet 604.17 4.761905 30.2085 5.3 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 995 233-67-5758 C Naypyitaw Normal Male Health and beauty 40.35 1 2.0175 42.3675 1/29/2019 13:46 Ewallet 40.35 4.761905 2.0175 6.2 996 303-96-2227 B Mandalay Normal Female Home and lifestyle 97.38 10 48.6900 1022.4900 3/2/2019 17:16 Ewallet 973.80 4.761905 48.6900 4.4 997 727-02-1313 A Yangon Member Male Food and beverages 31.84 1 1.5920 33.4320 2/9/2019 13:22 Cash 31.84 4.761905 1.5920 7.7 998 347-56-2442 A Yangon Normal Male Home and lifestyle 65.82 1 3.2910 69.1110 2/22/2019 15:33 Cash 65.82 4.761905 3.2910 4.1 999 849-09-3807 A Yangon Member Female Fashion accessories 88.34 7 30.9190 649.2990 2/18/2019 13:28 Cash 618.38 4.761905 30.9190 6.6 <p>1000 rows \u00d7 17 columns</p>"},{"location":"notebooks/final/#descriptive-statistics","title":"Descriptive statistics","text":""},{"location":"notebooks/final/#there-is-mean-and-standart-deviation-of-different-fields","title":"There is mean and standart deviation of different fields","text":"<pre><code>sales.describe()\n</code></pre> Unit price Quantity Tax 5% Total cogs gross margin percentage gross income Rating count 1000.000000 1000.000000 1000.000000 1000.000000 1000.00000 1000.000000 1000.000000 1000.00000 mean 55.672130 5.510000 15.379369 322.966749 307.58738 4.761905 15.379369 6.97270 std 26.494628 2.923431 11.708825 245.885335 234.17651 0.000000 11.708825 1.71858 min 10.080000 1.000000 0.508500 10.678500 10.17000 4.761905 0.508500 4.00000 25% 32.875000 3.000000 5.924875 124.422375 118.49750 4.761905 5.924875 5.50000 50% 55.230000 5.000000 12.088000 253.848000 241.76000 4.761905 12.088000 7.00000 75% 77.935000 8.000000 22.445250 471.350250 448.90500 4.761905 22.445250 8.50000 max 99.960000 10.000000 49.650000 1042.650000 993.00000 4.761905 49.650000 10.00000"},{"location":"notebooks/final/#median-of-different-columns","title":"Median of different columns","text":"<pre><code>print(sales.Quantity.median())\nprint(sales.Rating.median())\nprint(int(sales.Total.median()))\n</code></pre> <pre><code>5.0\n7.0\n253\n</code></pre>"},{"location":"notebooks/final/#looking-at-columns-in-detail","title":"Looking at columns in detail","text":"<pre><code>columns_names = list(sales.columns)\ncolumns = pd.DataFrame(columns_names, columns = ['Names of columns'])\ncolumns\n</code></pre> Names of columns 0 Invoice ID 1 Branch 2 City 3 Customer type 4 Gender 5 Product line 6 Unit price 7 Quantity 8 Tax 5% 9 Total 10 Date 11 Time 12 Payment 13 cogs 14 gross margin percentage 15 gross income 16 Rating"},{"location":"notebooks/final/#looking-on-different-product-lines-presented-in-dataset","title":"Looking on different product lines presented in dataset","text":"<pre><code>d = pd.DataFrame(set(list(sales['Product line'])))\nd\n</code></pre> 0 0 Food and beverages 1 Electronic accessories 2 Fashion accessories 3 Sports and travel 4 Health and beauty 5 Home and lifestyle"},{"location":"notebooks/final/#data-cleanup","title":"Data cleanup","text":""},{"location":"notebooks/final/#checking-for-zero-and-nan-elements","title":"Checking for zero and \"NaN\" elements","text":"<pre><code>sales.count()\n</code></pre> <pre><code>Invoice ID                 1000\nBranch                     1000\nCity                       1000\nCustomer type              1000\nGender                     1000\nProduct line               1000\nUnit price                 1000\nQuantity                   1000\nTax 5%                     1000\nTotal                      1000\nDate                       1000\nTime                       1000\nPayment                    1000\ncogs                       1000\ngross margin percentage    1000\ngross income               1000\nRating                     1000\ndtype: int64\n</code></pre> <p>Therefore there is no such elements </p>"},{"location":"notebooks/final/#format-column-names","title":"Format column names","text":"<pre><code>sales['Total'] = sales['Total'].apply(lambda x: round(x, 2))\nsales['gross income'] = sales['gross income'].apply(lambda x: round(x, 2))\nsales = sales.drop(['Invoice ID', 'Tax 5%', 'Branch', 'gross margin percentage', 'cogs'], axis = 1)\nsales.rename(columns={'gross income': 'Gross income'}, inplace=True)\nsales\n</code></pre> City Customer type Gender Product line Unit price Quantity Total Date Time Payment Gross income Rating 0 Yangon Member Female Health and beauty 74.69 7 548.97 1/5/2019 13:08 Ewallet 26.14 9.1 1 Naypyitaw Normal Female Electronic accessories 15.28 5 80.22 3/8/2019 10:29 Cash 3.82 9.6 2 Yangon Normal Male Home and lifestyle 46.33 7 340.53 3/3/2019 13:23 Credit card 16.22 7.4 3 Yangon Member Male Health and beauty 58.22 8 489.05 1/27/2019 20:33 Ewallet 23.29 8.4 4 Yangon Normal Male Sports and travel 86.31 7 634.38 2/8/2019 10:37 Ewallet 30.21 5.3 ... ... ... ... ... ... ... ... ... ... ... ... ... 995 Naypyitaw Normal Male Health and beauty 40.35 1 42.37 1/29/2019 13:46 Ewallet 2.02 6.2 996 Mandalay Normal Female Home and lifestyle 97.38 10 1022.49 3/2/2019 17:16 Ewallet 48.69 4.4 997 Yangon Member Male Food and beverages 31.84 1 33.43 2/9/2019 13:22 Cash 1.59 7.7 998 Yangon Normal Male Home and lifestyle 65.82 1 69.11 2/22/2019 15:33 Cash 3.29 4.1 999 Yangon Member Female Fashion accessories 88.34 7 649.30 2/18/2019 13:28 Cash 30.92 6.6 <p>1000 rows \u00d7 12 columns</p>"},{"location":"notebooks/final/#plots","title":"Plots","text":""},{"location":"notebooks/final/#amount-of-products-by-each-product-line","title":"Amount of products by each product line","text":"<pre><code>dfk = sales.groupby(\"Product line\")['Quantity'].sum()\ndfk = pd.DataFrame(dfk)\ndfk.reset_index(inplace=True)\ndfk = dfk.sort_values('Quantity', ascending=True, ignore_index=True)\nfig = px.bar(dfk, x='Product line', y='Quantity')\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#product-line-comparison-to-unit-price","title":"Product line comparison to unit price","text":"<pre><code>fig=px.box(sales,x='Product line',color='Product line',y='Unit price')\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#amount-of-total-sum-of-purchases-by-product-lined","title":"Amount of total sum of purchases by product lined","text":"<pre><code>df = pd.DataFrame({'Line': sales['Product line'], 'City': sales['City'], 'Total': sales['Total']})\ndf = pd.DataFrame(df.groupby('Line')['Total'].sum())\nfig = px.bar(df.reset_index(), x='Line', y='Total')\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#amount-of-total-sum-of-purchases-by-city","title":"Amount of total sum of purchases by city","text":"<pre><code>df = pd.DataFrame({'line': sales['Product line'], 'City': sales['City'], 'Total': sales['Total']})\ndf = pd.DataFrame(df.groupby('City')['Total'].sum())\nfig = px.bar(df.reset_index(), x='City', y='Total')\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#rating-by-time-of-purchases","title":"Rating by time of purchases","text":"<pre><code>sale = pd.DataFrame({'Time': sales['Time'], 'Rating': sales['Rating'], 'Total': sales['Total']})\nsale = sale.sort_values('Time')\nfig = px.scatter(sale, x=\"Time\", y=\"Rating\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#total-sum-of-purchases-by-time-of-purchases","title":"Total sum of purchases by time of purchases","text":"<pre><code>fig = px.scatter(sale, x=\"Time\", y=\"Total\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#relation-of-payment-methods-and-total-sum-of-purchases","title":"Relation of payment methods and total sum of purchases","text":"<pre><code>fig1 = px.pie(sales, names='Payment', values='Total')\nfig1.show()\n</code></pre>"},{"location":"notebooks/final/#relation-between-membership-and-total-sum-of-purchases-and-rating","title":"Relation between membership and total sum of purchases and rating","text":"<pre><code>fig = px.pie(sales, values=\"Total\", names=\"Customer type\")\nfig.show()\n</code></pre> <pre><code>fig = px.pie(sales, values=\"Rating\", names=\"Customer type\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#detailed-overview","title":"Detailed overview","text":""},{"location":"notebooks/final/#what-product-line-gives-more-total-sum-of-products-and-in-what-city","title":"What product line gives more total sum of products and in what city","text":"<pre><code>df = pd.DataFrame({'line': sales['Product line'], 'city': sales['City'], 'total': sales['Total']})\ndf = df.sort_values(by='city', ignore_index=True)\nfig = px.sunburst(df, path=['city', 'line'], values='total')\nfig.update_layout(margin = dict(t=1, l=1, r=1, b=1))\nfig.show()\n\n</code></pre>"},{"location":"notebooks/final/#membershiping-by-sex","title":"Membershiping by sex","text":"<pre><code>df = pd.DataFrame({'sex': sales['Gender'], 'Customer type': sales['Customer type']})\nmale_member = 0\nmale_notmem = 0\nfemale_member = 0\nfemale_notmem = 0\ndf_sorted = df.sort_values(by='sex', ascending=False)\n#count male member/not member\nfor i in range(501):    \n    if df_sorted.iloc[i, 1] == 'Member':\n        male_member += 1\n    else:\n        male_notmem += 1\nfor i in range(501, 1000):    \n    if df_sorted.iloc[i, 1] == 'Member':\n        female_member += 1\n    else:\n        female_notmem += 1\ndf1 = pd.DataFrame({'male': [male_member, male_notmem] , 'female': [female_member, female_notmem], 'membership': ['member', 'not_member']})\n\ndf_transformed = df1.melt(id_vars='membership', var_name='sex', value_name='count')\nfig = px.bar(df_transformed, x='sex', y='count', color='membership', barmode='group', height=350)\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#total-sum-and-it-dependence-of-date-time-and-city","title":"Total sum and it dependence of date, time and city","text":"<pre><code>ndf = pd.DataFrame({'date': sales['Date'], 'time': sales['Time'], 'city': sales['City'], 'total': sales['Total']})\nndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\nfig = px.scatter_3d(ndf, x='date', y='time', z='total',\n              color='city', size_max=18,\n              symbol='city', opacity=0.7)\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n</code></pre> <p>We can note that there are interesting trendline each city</p> <p>Lets look more datailed on them</p>"},{"location":"notebooks/final/#mandalay","title":"Mandalay","text":"<pre><code>\nndf = ndf[ndf['city'] == 'Mandalay']\nndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\nfig = px.scatter_3d(\n    ndf,\n    x='date',\n    y='time',\n    z='total',\n    color='city',\n    size_max=18,\n    symbol='city',\n    opacity=0.7\n)\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n</code></pre> <pre><code>fig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre> <pre><code>ndf = ndf.sort_values(['time', 'date'], ignore_index=True, ascending=True)\nfig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#yangon","title":"Yangon","text":"<pre><code>ndf = pd.DataFrame({'date': sales['Date'], 'time': sales['Time'], 'city': sales['City'], 'total': sales['Total']})\nndf = ndf[ndf['city'] == 'Yangon']\nndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\nfig = px.scatter_3d(\n    ndf,\n    x='date',\n    y='time',\n    z='total',\n    color='city',\n    size_max=18,\n    symbol='city',\n    opacity=0.7\n)\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n</code></pre> <pre><code>ndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\n\nfig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre> <pre><code>ndf = ndf.sort_values(['time', 'date'], ignore_index=True, ascending=True)\nfig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#naypyitaw","title":"Naypyitaw","text":"<pre><code>ndf = pd.DataFrame({'date': sales['Date'], 'time': sales['Time'], 'city': sales['City'], 'total': sales['Total']})\nndf = ndf[ndf['city'] == 'Naypyitaw']\nndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\nfig = px.scatter_3d(\n    ndf,\n    x='date',\n    y='time',\n    z='total',\n    color='city',\n    size_max=18,\n    symbol='city',\n    opacity=0.7\n)\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n</code></pre> <pre><code>ndf = ndf.sort_values(['date', 'time'], ignore_index=True, ascending=True)\n\nfig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre> <pre><code>ndf = ndf.sort_values(['time', 'date'], ignore_index=True, ascending=True)\nfig = px.scatter(ndf, x=\"time\", y=\"date\")\nfig.show()\n</code></pre> <p>Overall, we can notice similar graph trends for each city This may be due to different factors: working hours, growing popularity of the supermarket and etc.</p>"},{"location":"notebooks/final/#average-total-sum-in-half-hours","title":"Average total sum in half hours","text":"<pre><code>data = []\n\nfor i in range(10, 21):\n    first_halfhour = generate_time_list(i, 0, i, 29)\n    sec_halfhour = generate_time_list(i, 30, i, 59)\n\n    total_f = total_s = cnt = cnto = 0\n\n    for j in range(1000):\n        if dfr['time'].iloc[j] in first_halfhour:\n            cnt += 1\n            total_f += int(dfr['total'].iloc[j])\n\n        if dfr['time'].iloc[j] in sec_halfhour:\n            cnto += 1\n            total_s += int(dfr['total'].iloc[j])\n\n    totalfi = round(total_f / cnt, 2) if cnt else 0\n    totalse = round(total_s / cnto, 2) if cnto else 0\n    data.append([f\"{str(i).zfill(2)}:00 - {str(i).zfill(2)}:29\", totalfi])\n    data.append([f\"{str(i).zfill(2)}:30 - {str(i).zfill(2)}:59\", totalse])\n\n# Create a DataFrame from the data\ndf_result = pd.DataFrame(data, columns=['Time Range', 'Average Total'])\ndf_result\n</code></pre> Time Range Average Total 0 10:00 - 10:29 262.82 1 10:30 - 10:59 357.47 2 11:00 - 11:29 360.95 3 11:30 - 11:59 316.12 4 12:00 - 12:29 273.05 5 12:30 - 12:59 307.42 6 13:00 - 13:29 353.33 7 13:30 - 13:59 322.05 8 14:00 - 14:29 310.98 9 14:30 - 14:59 426.67 10 15:00 - 15:29 339.83 11 15:30 - 15:59 266.19 12 16:00 - 16:29 393.54 13 16:30 - 16:59 271.79 14 17:00 - 17:29 373.14 15 17:30 - 17:59 288.92 16 18:00 - 18:29 297.94 17 18:30 - 18:59 256.90 18 19:00 - 19:29 366.04 19 19:30 - 19:59 338.32 20 20:00 - 20:29 278.70 21 20:30 - 20:59 332.16 <p>Look at origin graph</p> <pre><code>fig = px.scatter(sale, x=\"Time\", y=\"Total\")\nfig.show()\n</code></pre> <pre><code>fig = px.line(df_result, x=\"Time Range\", y=\"Average Total\")\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#change-in-the-total-price-of-country-according-to-date","title":"Change in the Total price of Country according to date","text":"<pre><code>px.bar(sales, x='City',y='Total',color='City',animation_frame='Date',\n      animation_group=\"City\", range_y=[0,1000])\n</code></pre>"},{"location":"notebooks/final/#data-transformation","title":"Data transformation","text":""},{"location":"notebooks/final/#creating-two-new-columns-of-different-interesting-ratios","title":"Creating two new columns of different interesting ratios","text":"<pre><code>sales['Price-rating ratio'] = sales['Total']/sales['Rating']\nsales['Price-rating ratio'] = sales['Price-rating ratio'].astype('int64')\nsales['Qnty/price'] = sales['Total']/sales['Quantity']\nsales['Qnty/price'] = sales['Qnty/price'].apply(lambda x: round(x, 2))\nsales\n\n</code></pre> City Customer type Gender Product line Unit price Quantity Total Date Time Payment Gross income Rating Price-rating ratio Qnty/price 0 Yangon Member Female Health and beauty 74.69 7 548.97 1/5/2019 13:08 Ewallet 26.14 9.1 60 78.42 1 Naypyitaw Normal Female Electronic accessories 15.28 5 80.22 3/8/2019 10:29 Cash 3.82 9.6 8 16.04 2 Yangon Normal Male Home and lifestyle 46.33 7 340.53 3/3/2019 13:23 Credit card 16.22 7.4 46 48.65 3 Yangon Member Male Health and beauty 58.22 8 489.05 1/27/2019 20:33 Ewallet 23.29 8.4 58 61.13 4 Yangon Normal Male Sports and travel 86.31 7 634.38 2/8/2019 10:37 Ewallet 30.21 5.3 119 90.63 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 995 Naypyitaw Normal Male Health and beauty 40.35 1 42.37 1/29/2019 13:46 Ewallet 2.02 6.2 6 42.37 996 Mandalay Normal Female Home and lifestyle 97.38 10 1022.49 3/2/2019 17:16 Ewallet 48.69 4.4 232 102.25 997 Yangon Member Male Food and beverages 31.84 1 33.43 2/9/2019 13:22 Cash 1.59 7.7 4 33.43 998 Yangon Normal Male Home and lifestyle 65.82 1 69.11 2/22/2019 15:33 Cash 3.29 4.1 16 69.11 999 Yangon Member Female Fashion accessories 88.34 7 649.30 2/18/2019 13:28 Cash 30.92 6.6 98 92.76 <p>1000 rows \u00d7 14 columns</p>"},{"location":"notebooks/final/#two-example-graph-using-new-columns","title":"Two example graph using new columns","text":"<pre><code>fig = px.pie(sales, values='Price-rating ratio', names='City')\nfig.show()\n</code></pre> <pre><code>fig = px.bar(sales, x='Qnty/price', y='Product line')\nfig.show()\n</code></pre>"},{"location":"notebooks/final/#hypothesis","title":"Hypothesis","text":""},{"location":"notebooks/final/#city-and-customer-type-influence-total","title":"City and customer type influence total","text":"<pre><code>grouped_data = sales.groupby(['City', 'Customer type', 'Product line'])['Total'].sum().reset_index()\n\n# Create a faceted bar chart\nfig1 = px.bar(grouped_data, x='Product line', y='Total', color='Customer type',\n              facet_col='City')\nfig1.update_layout(height=400, width=1000)\nfig1.show()\n</code></pre> <p>In each city, normal customers consistently contribute more to total sales across all product lines, with significant variation in sales by product type.</p>"},{"location":"notebooks/final/#higher-unit-prices-lead-to-lower-quantities-sold","title":"Higher Unit Prices Lead to Lower Quantities Sold","text":"<pre><code>fig1 = px.scatter(sales, x='Quantity', y='Unit price', trendline='lowess')\nfig1.show()\n</code></pre> <p>The flat trendline indicates no clear relationship between unit price and quantity sold, suggesting that price changes do not significantly impact sales quantity.</p>"},{"location":"notebooks/final/#naypyitaw-has-more-total-sales-per-each-customer-type","title":"Naypyitaw has more total sales per each customer type","text":"<pre><code>city_customer_sales = sales.groupby(['City', 'Customer type'])['Total'].sum().reset_index()\n\n# Create a bar chart\nfig1 = px.bar(city_customer_sales, x='City', y='Total', color='Customer type')\nfig1.show()\n</code></pre> <p>Naypyitaw has the highest total sales for both member and normal customer types compared to Mandalay and Yangon</p>"},{"location":"notebooks/final/#rating-is-not-infuenced-by-gross-income-total-and-payment-method","title":"Rating is not infuenced by gross income, total and payment method","text":"<pre><code>fig = px.scatter(sale, x=\"Total\", y=\"Rating\", trendline='lowess')\nfig.show()\n</code></pre> <p>The trendline is nearly flat, suggesting that the total sales amount does not significantly affect customer ratings.</p> <pre><code>fig3 = px.scatter(sales, x='Gross income', y='Rating', trendline='lowess')\nfig3.show()\n\n\n</code></pre> <p>Similar to the previous plot, the trendline remains flat, indicating that gross income has little to no impact on customer ratings.</p> <pre><code>fig4 = px.box(sales, x='Payment', y='Rating')\nfig4.show()\n</code></pre> <p>The ratings are similar across eWallet, cash, and credit card payment methods, with overlapping interquartile ranges.</p> <p>The overall hypothesis that rating is not influenced by gross income, total sales, or payment method is supported by the data. Each graph consistently shows no significant correlation between these variables and customer ratings.</p>"}]}